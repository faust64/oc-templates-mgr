#!/bin/bash

BPATH=`dirname $0`
if test -s $BPATH/commons.sh; then
    . "$BPATH/commons.sh"
    test -s "$BPATH/../profile" && . "$BPATH/../profile"
else
    echo "[ERROR] can't find commons.sh" >&2
    exit 1
fi

if test -s /etc/debian-version; then
    PKGLIST="dpkg -l"
    RBYMATCH="^ii[ ]*libruby"
    PRLMATCH="^ii[ ]*libyaml-perl"
else
    PKGLIST="rpm -qa"
    RBYMATCH="^ruby-libs"
    PRLMATCH="^perl-YAML-LibYAML"
fi
test "$ENFORCE_LIMITS" = false   || ENFORCE_LIMITS=true
test "$ENFORCE_REQUESTS" = false || ENFORCE_REQUESTS=true
test -z "$FILTER"                && FILTER=".*"
test -z "$GITHOOK"               && GITHOOK=true
if $PKGLIST | grep -E "$RBYMATCH" >/dev/null; then
    YMLPARSER=ruby
elif $PKGLIST | grep -E "$PRLMATCH" >/dev/null; then
    YMLPARSER=perl
else
    YMLPARSER=
    echo "[WARNING] could not find YAML parser -- won't check everything!" >&2
fi

postproccontainer()
{
    local misses

    misses=
    if $ENFORCE_LIMITS; then
	if ! $hasCpuLimit; then
	    misses="CPU limitation"
	elif ! $hasRamLimit; then
	    misses="RAM limitation"
	fi
    fi
    if $ENFORCE_REQUESTS; then
	if ! $hasCpuRequest; then
	    misses="CPU request"
	elif ! $hasRamRequest; then
	    misses="RAM request"
	fi
    fi
    if test "$misses"; then
	if test "$DEBUG"; then
	    echo "[KO]"
	else
	    echo "[KO] missing $misses scheduling $watching @$template" >&2
	fi
	if $GITHOOK; then
	    exit 1
	fi
    elif test "$DEBUG"; then
	echo "[OK]"
    fi
}

find . -type d -maxdepth 1 2>/dev/null |
    while read project
    do
	ls $project/*.yml 2>/dev/null |
	    while read template
	    do
		if ! echo "$template" | grep -E "$FILTER" >/dev/null; then
		     test "$DEBUG" && echo "[NOTICE] skipping $template check - does not match filter"
		    continue
		elif grep '^[ ]*	' "$template" >/dev/null 2>&1; then
		    echo "[ERROR] syntax error in $template"
		    if $GITHOOK; then
			exit 1
		    fi
		    continue
		elif test "$YMLPARSER" = ruby; then
		    if ! ruby -e "require 'yaml';puts YAML.load_file(\"$template\")" >/dev/null 2>&1; then
			echo "[ERROR] failed parsing $template (ruby)"
			if $GITHOOK; then
			    exit 1
			fi
			continue
		    fi
		elif test "$YMLPARSER" = perl; then
		    if ! perl -MYAML -e "use YAML;YAML::LoadFile(\"$template\")" >/dev/null 2>&1; then
			echo "[ERROR] failed parsing $template (perl)"
			if $GITHOOK; then
			    exit 1
			fi
			continue
		    fi
		fi
		if test "$DEBUG"; then
		    echo "[DEBUG] now processing $template"
		fi
		hasCpuLimit=false hasRamLimit=false hasCpuRequest=false hasRamRequest=false watching=
		( parse_yaml "$template" ; echo EOF ) |
		    while read line
		    do
			if echo "$line" | grep objects_spec_template_spec_containers_name= >/dev/null; then
			    if test "$watching"; then
				postproccontainer || exit $?
			    fi
			    hasCpuLimit=false hasRamLimit=false hasCpuRequest=false hasRamRequest=false
			    watching=`echo "$line" | sed -e 's|^[^=]*=||' -e 's|"||g' -e "s|'||g"`
			    if test "$DEBUG"; then
				echo -n "[DEBUG] processing $template#$watching "
			    fi
			elif test -z "$watching"; then
			    continue
			elif echo "$line" | grep spec_containers_resources_limits_cpu >/dev/null; then
			    hasCpuLimit=true
			elif echo "$line" | grep spec_containers_resources_limits_memory >/dev/null; then
			    hasRamLimit=true
			elif echo "$line" | grep spec_containers_resources_requests_cpu >/dev/null; then
			    hasCpuRequest=true
			elif echo "$line" | grep spec_containers_resources_requests_memory >/dev/null; then
			    hasRamRequest=true
			elif ! echo "$line" | grep objects_spec_template_spec_containers_ >/dev/null; then
			    postproccontainer || exit $?
			    watching=
			fi
		    done
		ret=$?
		if test -z "$DEBUG"; then
		    if test "0$ret" -ne 0; then
			echo "[$template KO]"
			if $GITHOOK; then
			    exit 1
			fi
		    fi
		fi
	    done
    done

exit 0
